# Run this script from Windows, not MSYS2
"""
This file is part of the MusiKernel project, Copyright MusiKernel Team

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
"""

import os
import shutil

TEMPLATE = r"""; Script generated by the HM NIS Edit Script Wizard.

; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "MusiKernel"
!define PRODUCT_VERSION "1.0"
!define PRODUCT_PUBLISHER "MusiKernel Team"

;Require admin rights on NT6+ (When UAC is turned on)
RequestExecutionLevel admin

SetCompressor /SOLID lzma

Name "${{PRODUCT_NAME}} ${{PRODUCT_VERSION}}"
OutFile "{MAJOR_VERSION}-{MINOR_VERSION}-win-x{bits}.exe"
InstallDir "C:\{MAJOR_VERSION}-{bits}"

;--------------------------------
;Interface Settings
  !define MUI_ABORTWARNING
  !define MUI_LICENSEPAGE_CHECKBOX

!include MUI2.nsh

;--------------------------------
;Modern UI Configuration
;Installer pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE "gpl-3.0.txt"
;!insertmacro MUI_PAGE_COMPONENTS
;!insertmacro MUI_PAGE_DIRECTORY
;!insertmacro MUI_PAGE_STARTMENU pageid variable
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

;Uninstaller pages
!insertmacro MUI_UNPAGE_WELCOME
!insertmacro MUI_UNPAGE_CONFIRM
;!insertmacro MUI_UNPAGE_LICENSE textfile
;!insertmacro MUI_UNPAGE_COMPONENTS
;!insertmacro MUI_UNPAGE_DIRECTORY
!insertmacro MUI_UNPAGE_INSTFILES
!insertmacro MUI_UNPAGE_FINISH

;--------------------------------
;Languages
  !insertmacro MUI_LANGUAGE "English"

Section "install"
  RMDir /r $INSTDIR
  SetOutPath $INSTDIR
  writeUninstaller "$INSTDIR\uninstall.exe"
  File /r "C:\{MAJOR_VERSION}-{bits}\*"
  RMDir /r "$SMPROGRAMS\${{PRODUCT_NAME}}"
  CreateDirectory "$SMPROGRAMS\${{PRODUCT_NAME}}"
  SetOutPath "$INSTDIR\mingw{bits}\bin"
  createShortCut "$SMPROGRAMS\${{PRODUCT_NAME}}\${{PRODUCT_NAME}}.lnk" \
    "$INSTDIR\mingw{bits}\bin\{MAJOR_VERSION}.bat" "" \
    "$INSTDIR\{MAJOR_VERSION}.ico" "" SW_SHOWMINIMIZED
SectionEnd

Section "uninstall"
  RMDir /r $INSTDIR
  delete "$SMPROGRAMS\${{PRODUCT_NAME}}\${{PRODUCT_NAME}}.lnk"
  RMDir "$SMPROGRAMS\${{PRODUCT_NAME}}"
SectionEnd
"""

CWD = os.path.abspath(os.path.dirname(__file__))

with open(os.path.join(CWD, "..", "src", "minor-version.txt")) as fh:
    MINOR_VERSION = fh.read().strip()

with open(os.path.join(CWD, "..", "src", "major-version.txt")) as fh:
    MAJOR_VERSION = fh.read().strip()


for arch, bits in (("i686", "32"), ("x86_64", "64")):
    src = ("mingw-w64-{arch}-{MAJOR_VERSION}-{MINOR_VERSION}"
        "-1-any.pkg.tar.xz".format(
        arch=arch, MAJOR_VERSION=MAJOR_VERSION, MINOR_VERSION=MINOR_VERSION))
    dest = r"C:\{MAJOR_VERSION}-{bits}\home\pydaw".format(
        bits=bits, MAJOR_VERSION=MAJOR_VERSION)
    if not os.path.isdir(dest):
        os.makedirs(dest)
    shutil.copy(src, dest)
    shell = r"C:\{MAJOR_VERSION}-{bits}\mingw{bits}_shell.bat".format(
        MAJOR_VERSION=MAJOR_VERSION, bits=bits)
    os.system(shell)

input("Press 'enter' to continue")

NSIS = r"C:\Program Files (x86)\NSIS\makensis.exe"
BASE_DIR = r"C:\{MAJOR_VERSION}-".format(MAJOR_VERSION=MAJOR_VERSION)
TMP_DIR = r"C:\mk_tmp"

if not os.path.isdir(TMP_DIR):
    os.mkdir(TMP_DIR)

if os.listdir(TMP_DIR):
    print("Error:  '{}' is not empty".format(TMP_DIR))
    exit(1)

for bits in ("32", "64"):
    mingw_dir = "mingw" + bits
    current_dir = BASE_DIR + bits
    for file_name in (x for x in os.listdir(current_dir) if x != mingw_dir):
        shutil.move(os.path.join(current_dir, file_name), TMP_DIR)
    template = TEMPLATE.format(
        bits=bits, MINOR_VERSION=MINOR_VERSION, MAJOR_VERSION=MAJOR_VERSION)
    template_name = "{0}-{1}.nsi".format(MAJOR_VERSION, bits)
    with open(template_name, "w") as fh:
        fh.write(template)
    os.system('"{0}" "{1}"'.format(NSIS, template_name))
    for file_name in os.listdir(TMP_DIR):
        shutil.move(os.path.join(TMP_DIR, file_name), current_dir)
